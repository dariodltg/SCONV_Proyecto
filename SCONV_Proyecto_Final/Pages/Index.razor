@page "/"
@using Google.Cloud.Dialogflow.V2
@using Google.Protobuf
@using NAudio.Wave
@using Microsoft.JSInterop
@using System.Net
@inject IJSRuntime JS


<PageTitle>Index</PageTitle>

<h1>Bienvenido</h1>

Inicie su pedido

<input class="form-text" type="text" @bind-value="@inputUsuario">Prueba</input>
<button class="btn btn-info" @onclick="EnviarFrase">Enviar</button>

<label class="col-sm-2 control-label">@respuestaDialogFlow</label>

<div class="wrapper mt-5">
    <section class="main-controls">
        <canvas id="canvas" class="visualizer" height="60"></canvas>
        <div id="buttons">
            <button class="@recordButton" @onclick=Record>Record</button>
            <button class="stop" @onclick=Stop>Stop</button>
        </div>
    </section>
    <canvas id="canvas" class="visualizer" height="60"></canvas>
    <section class="sound-clips"></section>
    <audio controls autoplay></audio>
</div>

<ul id="recordingsList"></ul>

<audio controls id="respuesta">
    <source id="playerSource" src="" />
</audio>
<button @onclick=ReproducirAudio>Probar reproducir</button>



@code {
    public string respuestaDialogFlow { get; set; }
    public string projectId = "sconv-proyecto-370810";
    public string sessionId = "123456789";
    public string languageCode = "es";

    public bool nuevoAudio = true;

    [Parameter] public string inputUsuario { get; set; }

    private async Task EnviarFrase()
    {
        Console.WriteLine(inputUsuario);
        SessionsClient sessionsClient = SessionsClient.Create();
        SessionName sesion = new SessionName(projectId,sessionId);
        QueryInput queryInput = new QueryInput();
        queryInput.Text = new TextInput() { Text = inputUsuario, LanguageCode = languageCode };
        DetectIntentResponse respuesta = await sessionsClient.DetectIntentAsync(sesion, queryInput);
        respuestaDialogFlow = respuesta.QueryResult.FulfillmentText;
    }

    private async Task<DetectIntentResponse> EnviarAudio()
    {

        SessionsClient sessionsClient = SessionsClient.Create(); //TODO Compartir sessions client entre texto y voz no??
        SessionName sesion = new SessionName(projectId, sessionId);
        QueryInput queryInput = new QueryInput();

        queryInput.AudioConfig = new InputAudioConfig()
            {
                AudioEncoding = AudioEncoding.Linear16,
                LanguageCode = languageCode,
                SampleRateHertz = 44100
            };
        DetectIntentRequest peticion = new DetectIntentRequest();
        peticion.SessionAsSessionName = sesion;
        peticion.QueryInput = queryInput;

        string rutaWav = new DirectoryInfo("audios/").GetFiles()[0].Name;
        var formato = new WaveFormat(44100, 16, 1);

        using (WaveFileReader reader = new WaveFileReader("audios/"+rutaWav))
        {
            using (var resampler = new MediaFoundationResampler(reader, formato))
            {
                WaveFileWriter.CreateWaveFile("audios/resampleado_" + rutaWav, resampler);
            }
        }

        using (WaveFileReader reader = new WaveFileReader("audios/resampleado_" + rutaWav))
        {
            byte[] buffer = new byte[reader.Length];
            int read = reader.Read(buffer, 0, buffer.Length);
            short[] sampleBuffer = new short[read / 2];
            Buffer.BlockCopy(buffer, 0, sampleBuffer, 0, read);
            peticion.InputAudio = ByteString.CopyFrom(buffer);
        }

        DetectIntentResponse respuesta = await sessionsClient.DetectIntentAsync(peticion);
        return respuesta;
    }



    string recordButton = "record";

    bool recording = false;
    bool notRecording = true;


    private async Task Record()
    {

        recordButton = "recording";
        recording = true;
        notRecording = false;
        await JS.InvokeVoidAsync("startRecording");
    }

    private async Task Stop()
    {
        recordButton = "record";
        recording = false;
        notRecording = true;
        await JS.InvokeVoidAsync("stopRecording");
        DetectIntentResponse respuestaAudio = await EnviarAudio();
        byte[] buffer = respuestaAudio.OutputAudio.ToByteArray();
        var formato = new WaveFormat(16000, 16, 1);
        using (WaveFileWriter writer = new WaveFileWriter("audios/grabacion.wav", formato))
        {
            writer.Write(buffer, 0, buffer.Length);
        };
        //Upload to wwwroot

        using var stream = new MemoryStream(File.ReadAllBytes("audios/grabacion.wav").ToArray());
        var formFile = new FormFile(stream, 0, stream.Length, "streamFile", "audios/grabacion.wav");
        var fileName = Path.GetFileName(formFile.FileName);
        var filePath = Path.Combine(Directory.GetCurrentDirectory(), @"wwwroot\", fileName);
        using (var fileStream = new FileStream(filePath, FileMode.Create))
        {
            await formFile.CopyToAsync(fileStream);
        }
        


        await ReproducirAudio();
    }

    async Task ReproducirAudio()
    {
        await JS.InvokeVoidAsync("PlayAudioFile", "grabacion.wav");
    }
}